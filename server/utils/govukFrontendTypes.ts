// THIS FILE IS AUTOMATICALLY GENERATED. DON’T MODIFY IT MANUALLY.
// Re-generate this file by running `npm run-script generate-frontend-types`.

// The accordion component is described at https://design-system.service.gov.uk/components/accordion.
export interface AccordionArgs {
  /*
    Must be **unique** across the domain of your service (as the expanded state of individual instances of the component persists across page loads using [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage)). Used as an `id` in the HTML for the accordion as a whole, and also as a prefix for the `id`s of the section contents and the buttons that open them, so that those `id`s can be the target of `aria-labelledby` and `aria-control` attributes.
  */
  id: string

  /*
    Heading level, from 1 to 6. Default is `2`.
  */
  headingLevel?: number | null // integer

  /*
    Classes to add to the accordion.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the accordion.
  */
  attributes?: Record<string, unknown> | null

  /*
    An array of sections within the accordion.
  */
  items: AccordionArgsItem[]
}

export interface AccordionArgsItem {
  heading?: AccordionArgsItemHeading | null

  summary?: AccordionArgsItemSummary | null

  content?: AccordionArgsItemContent | null

  /*
    Whether the section should be expanded upon initial load or not. Defaults to `false`.
  */
  expanded?: boolean | null
}

export interface AccordionArgsItemHeading {
  /*
    The title of each section. If `heading.html` is supplied, this is ignored. This is used both as the title for each section, and as the button to open or close each section.
  */
  text?: string | null

  /*
    The HTML content of the header for each section which is used both as the title for each section, and as the button to open or close each section.
  */
  html?: string | null
}

export interface AccordionArgsItemSummary {
  /*
    Text content for summary line. If `summary.html` is supplied, this is ignored.
  */
  text?: string | null

  /*
    HTML content for summary line.
  */
  html?: string | null
}

export interface AccordionArgsItemContent {
  /*
    The text content of each section, which is hidden when the section is closed. If `content.html` is supplied, this is ignored.
  */
  text?: string | null

  /*
    The HTML content of each section, which is hidden when the section is closed.
  */
  html?: string | null
}

// The back link component is described at https://design-system.service.gov.uk/components/back-link.
export interface BackLinkArgs {
  /*
    Text to use within the back link component. If `html` is provided, the `text` argument will be ignored. Defaults to "Back".
  */
  text?: string | null

  /*
    HTML to use within the back link component. If `html` is provided, the `text` argument will be ignored. Defaults to "Back".
  */
  html?: string | null

  /*
    The value of the link href attribute.
  */
  href: string

  /*
    Classes to add to the anchor tag.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the anchor tag.
  */
  attributes?: Record<string, unknown> | null
}

// The breadcrumbs component is described at https://design-system.service.gov.uk/components/breadcrumbs.
export interface BreadcrumbsArgs {
  /*
    Array of breadcrumbs item objects.
  */
  items: BreadcrumbsArgsItem[]

  /*
    Classes to add to the breadcrumbs container.
  */
  classes?: string | null

  /*
    When true, the breadcrumbs will collapse to the first and last item only on tablet breakpoint and below.
  */
  collapseOnMobile?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the breadcrumbs container.
  */
  attributes?: Record<string, unknown> | null
}

export interface BreadcrumbsArgsItem {
  /*
    If `html` is set, this is not required. Text to use within the breadcrumbs item. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the breadcrumbs item. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Link for the breadcrumbs item. If not specified, breadcrumbs item is a normal list item.
  */
  href?: string | null

  /*
    HTML attributes (for example data attributes) to add to the individual crumb.
  */
  attributes?: Record<string, unknown> | null
}

// The button component is described at https://design-system.service.gov.uk/components/button.
export interface ButtonArgs {
  /*
    Whether to use an `input`, `button` or `a` element to create the button. In most cases you will not need to set this as it will be configured automatically if you use `href` or `html`.
  */
  element?: string | null

  /*
    If `html` is set, this is not required. Text for the button or link. If `html` is provided, the `text` argument will be ignored and `element` will be automatically set to `button` unless `href` is also set, or it has already been defined. This argument has no effect if `element` is set to `input`.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML for the button or link. If `html` is provided, the `text` argument will be ignored and `element` will be automatically set to `button` unless `href` is also set, or it has already been defined. This argument has no effect if `element` is set to `input`.
  */
  html?: string | null

  /*
    Name for the `input` or `button`. This has no effect on `a` elements.
  */
  name?: string | null

  /*
    Type of `input` or `button` – `button`, `submit` or `reset`. Defaults to `submit`. This has no effect on `a` elements.
  */
  type?: string | null

  /*
    Value for the `button` tag. This has no effect on `a` or `input` elements.
  */
  value?: string | null

  /*
    Whether the button should be disabled. For button and input elements, `disabled` and `aria-disabled` attributes will be set automatically.
  */
  disabled?: boolean | null

  /*
    The URL that the button should link to. If this is set, `element` will be automatically set to `a` if it has not already been defined.
  */
  href?: string | null

  /*
    Classes to add to the button component.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the button component.
  */
  attributes?: Record<string, unknown> | null

  /*
    Prevent accidental double clicks on submit buttons from submitting forms multiple times
  */
  preventDoubleClick?: boolean | null

  /*
    Use for the main call to action on your service's start page.
  */
  isStartButton?: boolean | null
}

// The character count component is described at https://design-system.service.gov.uk/components/character-count.
export interface CharacterCountArgs {
  /*
    The id of the textarea.
  */
  id: string

  /*
    The name of the textarea, which is submitted with the form data.
  */
  name: string

  /*
    Optional number of textarea rows (default is 5 rows).
  */
  rows?: string | null

  /*
    Optional initial value of the textarea.
  */
  value?: string | null

  /*
    If `maxwords` is set, this is not required. The maximum number of characters. If `maxwords` is provided, the `maxlength` argument will be ignored.
  */
  maxlength: string

  /*
    If `maxlength` is set, this is not required. The maximum number of words. If `maxwords` is provided, the `maxlength` argument will be ignored.
  */
  maxwords: string

  /*
    The percentage value of the limit at which point the count message is displayed. If this attribute is set, the count message will be hidden by default.
  */
  threshold?: string | null

  /*
    Options for the label component.
  */
  label: LabelArgs

  /*
    Options for the hint component.
  */
  hint?: HintArgs | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: ErrorMessageArgs | null

  /*
    Options for the form-group wrapper
  */
  formGroup?: CharacterCountArgsFormGroup | null

  /*
    Classes to add to the textarea.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the textarea.
  */
  attributes?: Record<string, unknown> | null

  /*
    Optional field to enable or disable the spellcheck attribute on the character count.
  */
  spellcheck?: boolean | null

  /*
    Options for the count message
  */
  countMessage?: CharacterCountArgsCountMessage | null
}

export interface CharacterCountArgsFormGroup {
  /*
    Classes to add to the form group (e.g. to show error state for the whole group)
  */
  classes?: string | null
}

export interface CharacterCountArgsCountMessage {
  /*
    Classes to add to the count message
  */
  classes?: string | null
}

// The checkboxes component is described at https://design-system.service.gov.uk/components/checkboxes.
export interface CheckboxesArgs {
  /*
    One or more element IDs to add to the input `aria-describedby` attribute without a fieldset, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Options for the fieldset component (e.g. legend).
  */
  fieldset?: FieldsetArgs | null

  /*
    Options for the hint component (e.g. text).
  */
  hint?: HintArgs | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: ErrorMessageArgs | null

  /*
    Options for the form-group wrapper
  */
  formGroup?: CheckboxesArgsFormGroup | null

  /*
    String to prefix id for each checkbox item if no id is specified on each item. If not passed, fall back to using the name option instead.
  */
  idPrefix?: string | null

  /*
    Name attribute for all checkbox items.
  */
  name: string

  /*
    Array of checkbox items objects.
  */
  items: CheckboxesArgsItem[]

  /*
    Classes to add to the checkboxes container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the anchor tag.
  */
  attributes?: Record<string, unknown> | null
}

export interface CheckboxesArgsFormGroup {
  /*
    Classes to add to the form group (e.g. to show error state for the whole group)
  */
  classes?: string | null
}

export interface CheckboxesArgsItem {
  /*
    If `html` is set, this is not required. Text to use within each checkbox item label. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within each checkbox item label. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Specific id attribute for the checkbox item. If omitted, then component global `idPrefix` option will be applied.
  */
  id?: string | null

  /*
    Specific name for the checkbox item. If omitted, then component global `name` string will be applied.
  */
  name?: string | null

  /*
    Value for the checkbox input.
  */
  value: string

  /*
    Provide attributes and classes to each checkbox item label.
  */
  label?: LabelArgs | null

  /*
    Provide hint to each checkbox item.
  */
  hint?: HintArgs | null

  /*
    If true, checkbox will be checked.
  */
  checked?: boolean | null

  conditional?: CheckboxesArgsItemConditional | null

  /*
    If true, checkbox will be disabled.
  */
  disabled?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the checkbox input tag.
  */
  attributes?: Record<string, unknown> | null
}

export interface CheckboxesArgsItemConditional {
  /*
    Provide content for the conditional reveal.
  */
  html?: string | null
}

// The date input component is described at https://design-system.service.gov.uk/components/date-input.
export interface DateInputArgs {
  /*
    This is used for the main component and to compose id attribute for each item.
  */
  id: string

  /*
    Optional prefix. This is used to prefix each `item.name` using `-`.
  */
  namePrefix?: string | null

  /*
    An array of input objects with name, value and classes.
  */
  items?: DateInputArgsItem[] | null

  /*
    Options for the hint component.
  */
  hint?: HintArgs | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: ErrorMessageArgs | null

  /*
    Options for the form-group wrapper
  */
  formGroup?: DateInputArgsFormGroup | null

  /*
    Options for the fieldset component (e.g. legend).
  */
  fieldset?: FieldsetArgs | null

  /*
    Classes to add to the date-input container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the date-input container.
  */
  attributes?: Record<string, unknown> | null
}

export interface DateInputArgsItem {
  /*
    Item-specific id. If provided, it will be used instead of the generated id.
  */
  id?: string | null

  /*
    Item-specific name attribute.
  */
  name: string

  /*
    Item-specific label text. If provided, this will be used instead of `name` for item label text.
  */
  label?: string | null

  /*
    If provided, it will be used as the initial value of the input.
  */
  value?: string | null

  /*
    Attribute to [identify input purpose](https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html), for instance "bday-day". See [autofill](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill) for full list of attributes that can be used.
  */
  autocomplete?: string | null

  /*
    Attribute to [provide a regular expression pattern](https://www.w3.org/TR/html51/sec-forms.html#the-pattern-attribute), used to match allowed character combinations for the input value.
  */
  pattern?: string | null

  /*
    Classes to add to date input item.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the date input tag.
  */
  attributes?: Record<string, unknown> | null
}

export interface DateInputArgsFormGroup {
  /*
    Classes to add to the form group (e.g. to show error state for the whole group)
  */
  classes?: string | null
}

// The details component is described at https://design-system.service.gov.uk/components/details.
export interface DetailsArgs {
  /*
    If `summmaryHtml` is set, this is not required. Text to use within the summary element (the visible part of the details element). If `summaryHtml` is provided, the `summaryText` argument will be ignored.
  */
  summaryText?: string | null

  /*
    If `summmaryText` is set, this is not required. HTML to use within the summary element (the visible part of the details element). If `summaryHtml` is provided, the `summaryText` argument will be ignored.
  */
  summaryHtml?: string | null

  /*
    If `html` is set, this is not required. Text to use within the disclosed part of the details element. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the disclosed part of the details element. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Id to add to the details element.
  */
  id?: string | null

  /*
    If true, details element will be expanded.
  */
  open?: boolean | null

  /*
    Classes to add to the `<details>` element.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the `<details>` element.
  */
  attributes?: Record<string, unknown> | null
}

// The error message component is described at https://design-system.service.gov.uk/components/error-message.
export interface ErrorMessageArgs {
  /*
    If `html` is set, this is not required. Text to use within the error message. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the error message. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Id attribute to add to the error message span tag.
  */
  id?: string | null

  /*
    Classes to add to the error message span tag.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the error message span tag
  */
  attributes?: Record<string, unknown> | null

  /*
    A visually hidden prefix used before the error message. Defaults to "Error".
  */
  visuallyHiddenText?: string | null
}

// The error summary component is described at https://design-system.service.gov.uk/components/error-summary.
export interface ErrorSummaryArgs {
  /*
    If `titleHtml` is set, this is not required. Text to use for the heading of the error summary block. If `titleHtml` is provided, `titleText` will be ignored.
  */
  titleText?: string | null

  /*
    If `titleText` is set, this is not required. HTML to use for the heading of the error summary block. If `titleHtml` is provided, `titleText` will be ignored.
  */
  titleHtml?: string | null

  /*
    Text to use for the description of the errors. If you set `descriptionHtml`, the component will ignore `descriptionText`.
  */
  descriptionText?: string | null

  /*
    HTML to use for the description of the errors. If you set this option, the component will ignore `descriptionText`.
  */
  descriptionHtml?: string | null

  /*
    Contains an array of error link items and all their available arguments.
  */
  errorList: ErrorSummaryArgsErrorListElement[]

  /*
    Classes to add to the error-summary container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the error-summary container.
  */
  attributes?: Record<string, unknown> | null
}

export interface ErrorSummaryArgsErrorListElement {
  /*
    Href attribute for the error link item. If provided item will be an anchor.
  */
  href?: string | null

  /*
    If `html` is set, this is not required. Text for the error link item. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML for the error link item. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    HTML attributes (for example data attributes) to add to the error link anchor.
  */
  attributes?: Record<string, unknown> | null
}

// The fieldset component is described at https://design-system.service.gov.uk/components/fieldset.
export interface FieldsetArgs {
  /*
    One or more element IDs to add to the `aria-describedby` attribute, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Options for the legend
  */
  legend?: FieldsetArgsLegend | null

  /*
    Classes to add to the fieldset container.
  */
  classes?: string | null

  /*
    Optional ARIA role attribute.
  */
  role?: string | null

  /*
    HTML attributes (for example data attributes) to add to the fieldset container.
  */
  attributes?: Record<string, unknown> | null

  /*
    HTML to use/render within the fieldset element.
  */
  html?: string | null

  /*
    Not strictly a parameter but [Nunjucks code convention](https://mozilla.github.io/nunjucks/templating.html#call). Using a `call` block enables you to call a macro with all the text inside the tag. This is helpful if you want to pass a lot of content into a macro. To use it, you will need to wrap the entire fielset component in a `call` block.
  */
  caller?: unknown | null // nunjucks-block
}

export interface FieldsetArgsLegend {
  /*
    If `html` is set, this is not required. Text to use within the legend. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the legend. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the legend.
  */
  classes?: string | null

  /*
    Whether the legend also acts as the heading for the page.
  */
  isPageHeading?: boolean | null
}

// The file upload component is described at https://design-system.service.gov.uk/components/file-upload.
export interface FileUploadArgs {
  /*
    The name of the input, which is submitted with the form data.
  */
  name: string

  /*
    The id of the input
  */
  id: string

  /*
    Optional initial value of the input
  */
  value?: string | null

  /*
    One or more element IDs to add to the `aria-describedby` attribute, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Options for the label component.
  */
  label: LabelArgs

  /*
    Options for the hint component.
  */
  hint?: HintArgs | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: ErrorMessageArgs | null

  /*
    Options for the form-group wrapper
  */
  formGroup?: FileUploadArgsFormGroup | null

  /*
    Classes to add to the file upload component.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the file upload component.
  */
  attributes?: Record<string, unknown> | null
}

export interface FileUploadArgsFormGroup {
  /*
    Classes to add to the form group (e.g. to show error state for the whole group)
  */
  classes?: string | null
}

// The footer component is described at https://design-system.service.gov.uk/components/footer.
export interface FooterArgs {
  /*
    Object containing options for the meta navigation.
  */
  meta?: FooterArgsMeta | null

  /*
    Array of items for use in the navigation section of the footer.
  */
  navigation?: FooterArgsNavigationElement[] | null

  /*
    Classes that can be added to the inner container, useful if you want to make the footer full width.
  */
  containerClasses?: string | null

  /*
    Classes to add to the footer component container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the footer component container.
  */
  attributes?: Record<string, unknown> | null
}

export interface FooterArgsMeta {
  /*
    Title for a meta item section, which defaults to Support links
  */
  visuallyHiddenTitle?: string | null

  /*
    HTML to add to the meta section of the footer, which will appear below any links specified using meta.items.
  */
  html?: string | null

  /*
    Text to add to the meta section of the footer, which will appear below any links specified using meta.items. If meta.html is specified, this option is ignored.
  */
  text?: string | null

  /*
    Array of items for use in the meta section of the footer.
  */
  items?: FooterArgsMetaItem[] | null
}

export interface FooterArgsMetaItem {
  /*
    List item text in the meta section of the footer.
  */
  text?: string | null

  /*
    List item href attribute in the meta section of the footer.
  */
  href: string

  /*
    HTML attributes (for example data attributes) to add to the anchor in the footer meta section.
  */
  attributes?: Record<string, unknown> | null
}

export interface FooterArgsNavigationElement {
  /*
    Title for a section
  */
  title: string

  /*
    Amount of columns to display items in navigation section of the footer.
  */
  columns?: number | null // integer

  /*
    Array of items to display in the list in navigation section of the footer.
  */
  items?: FooterArgsNavigationElementItem[] | null
}

export interface FooterArgsNavigationElementItem {
  /*
    List item text in the navigation section of the footer.
  */
  text?: string | null

  /*
    List item href attribute in the navigation section of the footer. Both `text` and `href` attributes need to be present to create a link.
  */
  href: string

  /*
    HTML attributes (for example data attributes) to add to the anchor in the footer navigation section.
  */
  attributes?: Record<string, unknown> | null
}

// The header component is described at https://design-system.service.gov.uk/components/header.
export interface HeaderArgs {
  /*
    The url of the homepage. Defaults to /
  */
  homepageUrl?: string | null

  /*
    The public path for the assets folder. If not provided it defaults to /assets/images
  */
  assetsPath?: string | null

  /*
    Product name, used when the product name follows on directly from ‘GOV.UK’. For example, GOV.UK Pay or GOV.UK Design System. In most circumstances, you should use serviceName.
  */
  productName?: string | null

  /*
    The name of your service, included in the header.
  */
  serviceName?: string | null

  /*
    Url for the service name anchor.
  */
  serviceUrl?: string | null

  /*
    An array of navigation item objects.
  */
  navigation?: HeaderArgsNavigationElement[] | null

  /*
    Classes for the navigation section of the header.
  */
  navigationClasses?: string | null

  /*
    Text for the `aria-label` attribute of the navigation. Defaults to "Navigation menu".
  */
  navigationLabel?: string | null

  /*
    Text for the `aria-label` attribute of the button that toggles the navigation. Defaults to "Show or hide navigation menu".
  */
  menuButtonLabel?: string | null

  /*
    Classes for the container, useful if you want to make the header fixed width.
  */
  containerClasses?: string | null

  /*
    Classes to add to the header container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the header container.
  */
  attributes?: Record<string, unknown> | null
}

export interface HeaderArgsNavigationElement {
  /*
    Text for the navigation item. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    HTML for the navigation item. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Url of the navigation item anchor.
  */
  href?: string | null

  /*
    Flag to mark the navigation item as active or not.
  */
  active?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the navigation item anchor.
  */
  attributes?: Record<string, unknown> | null
}

// The hint component is described at https://design-system.service.gov.uk/components/hint.
export interface HintArgs {
  /*
    If `html` is set, this is not required. Text to use within the hint. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the hint. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Optional id attribute to add to the hint span tag.
  */
  id?: string | null

  /*
    Classes to add to the hint span tag.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the hint span tag.
  */
  attributes?: Record<string, unknown> | null
}

// The input component is described at https://design-system.service.gov.uk/components/input.
export interface InputArgs {
  /*
    The id of the input.
  */
  id: string

  /*
    The name of the input, which is submitted with the form data.
  */
  name: string

  /*
    Type of input control to render. Defaults to "text".
  */
  type?: string | null

  /*
    Optional value for [inputmode](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).
  */
  inputmode?: string | null

  /*
    Optional initial value of the input.
  */
  value?: string | null

  /*
    One or more element IDs to add to the `aria-describedby` attribute, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Options for the label component.
  */
  label: LabelArgs

  /*
    Options for the hint component.
  */
  hint?: HintArgs | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: ErrorMessageArgs | null

  /*
    Options for the prefix element.
  */
  prefix?: InputArgsPrefix | null

  /*
    Options for the suffix element.
  */
  suffix?: InputArgsSuffix | null

  /*
    Options for the form-group wrapper
  */
  formGroup?: InputArgsFormGroup | null

  /*
    Classes to add to the input.
  */
  classes?: string | null

  /*
    Attribute to [identify input purpose](https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html), for instance "postal-code" or "username". See [autofill](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill) for full list of attributes that can be used.
  */
  autocomplete?: string | null

  /*
    Attribute to [provide a regular expression pattern](https://www.w3.org/TR/html51/sec-forms.html#the-pattern-attribute), used to match allowed character combinations for the input value.
  */
  pattern?: string | null

  /*
    Optional field to enable or disable the spellcheck attribute on the input.
  */
  spellcheck?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the anchor tag.
  */
  attributes?: Record<string, unknown> | null
}

export interface InputArgsPrefix {
  /*
    Required. If `html` is set, this is not required. Text to use within the label. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    Required. If `text` is set, this is not required. HTML to use within the label. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the prefix.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the prefix element.
  */
  attributes?: Record<string, unknown> | null
}

export interface InputArgsSuffix {
  /*
    Required. If `html` is set, this is not required. Text to use within the label. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    Required. If `text` is set, this is not required. HTML to use within the label. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the suffix element.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the suffix element.
  */
  attributes?: Record<string, unknown> | null
}

export interface InputArgsFormGroup {
  /*
    Classes to add to the form group (e.g. to show error state for the whole group)
  */
  classes?: string | null
}

// The inset text component is described at https://design-system.service.gov.uk/components/inset-text.
export interface InsetTextArgs {
  /*
    If `html` is set, this is not required. Text to use within the back link component. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the back link component. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Id attribute to add to the inset text container.
  */
  id?: string | null

  /*
    Classes to add to the inset text container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the inset text container.
  */
  attributes?: Record<string, unknown> | null
}

// The label component is described at https://design-system.service.gov.uk/components/label.
export interface LabelArgs {
  /*
    If `html` is set, this is not required. Text to use within the label. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the label. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    The value of the for attribute, the id of the input the label is associated with.
  */
  for?: string | null

  /*
    Whether the label also acts as the heading for the page.
  */
  isPageHeading?: boolean | null

  /*
    Classes to add to the label tag.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the label tag.
  */
  attributes?: Record<string, unknown> | null
}

// The notification banner component is described at https://design-system.service.gov.uk/components/notification-banner.
export interface NotificationBannerArgs {
  /*
    The text that displays in the notification banner. You can use any string with this option. If you set `html`, this option is not required and is ignored.
  */
  text?: string | null

  /*
    The HTML to use within the notification banner. You can use any string with this option. If you set `html`, `text` is not required and is ignored.
  */
  html?: string | null

  /*
    The title text that displays in the notification banner. You can use any string with this option. Use this option to set text that does not contain HTML. The available default values are 'Important', 'Success', and null:
    - if you do not set `type`, `titleText` defaults to 'Important'
    - if you set `type` to `success`, `titleText` defaults to 'Success'
    - if you set `titleHtml`, this option is ignored
    
  */
  titleText?: string | null

  /*
    The title HTML to use within the notification banner. You can use any string with this option. Use this option to set text that contains HTML. If you set `titleHtml`, the `titleText` option is ignored.
  */
  titleHtml?: string | null

  /*
    Sets heading level for the title only. You can only use values between `1` and `6` with this option. The default is `2`.
  */
  titleHeadingLevel?: string | null

  /*
    The type of notification to render. You can use only the `success` or null values with this option. If you set `type` to `success`, the notification banner sets `role` to `alert`. JavaScript then moves the keyboard focus to the notification banner when the page loads. If you do not set `type`, the notification banner sets `role` to `region`.
  */
  type?: string | null

  /*
    Overrides the value of the `role` attribute for the notification banner. Defaults to `region`. If you set `type` to `success`, `role` defaults to `alert`.
  */
  role?: string | null

  /*
    The `id` for the banner title, and the `aria-labelledby` attribute in the banner. Defaults to `govuk-notification-banner-title`.
  */
  titleId?: string | null

  /*
    If you set `type` to `success`, or `role` to `alert`, JavaScript moves the keyboard focus to the notification banner when the page loads. To disable this behaviour, set `disableAutoFocus` to `true`.
  */
  disableAutoFocus?: boolean | null

  /*
    The classes that you want to add to the notification banner.
  */
  classes?: string | null

  /*
    The HTML attributes that you want to add to the notification banner, for example, data attributes.
  */
  attributes?: Record<string, unknown> | null
}

// The panel component is described at https://design-system.service.gov.uk/components/panel.
export interface PanelArgs {
  /*
    If `titleHtml` is set, this is not required. Text to use within the panel. If `titleHtml` is provided, the `titleText` argument will be ignored.
  */
  titleText?: string | null

  /*
    If `titleText` is set, this is not required. HTML to use within the panel. If `titleHtml` is provided, the `titleText` argument will be ignored.
  */
  titleHtml?: string | null

  /*
    Heading level, from 1 to 6. Default is 1.
  */
  headingLevel?: number | null // integer

  /*
    If `html` is set, this is not required. Text to use within the panel content. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the panel content. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the panel container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the panel container.
  */
  attributes?: Record<string, unknown> | null
}

// The phase banner component is described at https://design-system.service.gov.uk/components/phase-banner.
export interface PhaseBannerArgs {
  /*
    If `html` is set, this is not required. Text to use within the phase banner. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the phase banner. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Options for the tag component.
  */
  tag?: TagArgs | null

  /*
    Classes to add to the phase banner container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the phase banner container.
  */
  attributes?: Record<string, unknown> | null
}

// The radios component is described at https://design-system.service.gov.uk/components/radios.
export interface RadiosArgs {
  /*
    Options for the fieldset component (e.g. legend).
  */
  fieldset?: FieldsetArgs | null

  /*
    Options for the hint component (e.g. text).
  */
  hint?: HintArgs | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: ErrorMessageArgs | null

  /*
    Options for the form-group wrapper
  */
  formGroup?: RadiosArgsFormGroup | null

  /*
    String to prefix id for each radio item if no id is specified on each item. If `idPrefix` is not passed, fallback to using the name attribute instead.
  */
  idPrefix?: string | null

  /*
    Name attribute for each radio item.
  */
  name: string

  /*
    Array of radio items objects.
  */
  items: RadiosArgsItem[]

  /*
    Classes to add to the radio container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the radio input tag.
  */
  attributes?: Record<string, unknown> | null
}

export interface RadiosArgsFormGroup {
  /*
    Classes to add to the form group (e.g. to show error state for the whole group)
  */
  classes?: string | null
}

export interface RadiosArgsItem {
  /*
    If `html` is set, this is not required. Text to use within each radio item label. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within each radio item label. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Specific id attribute for the radio item. If omitted, then `idPrefix` string will be applied.
  */
  id?: string | null

  /*
    Value for the radio input.
  */
  value: string

  /*
    Provide attributes and classes to each radio item label.
  */
  label?: LabelArgs | null

  /*
    Provide hint to each radio item.
  */
  hint?: HintArgs | null

  /*
    Divider text to separate radio items, for example the text "or".
  */
  divider?: string | null

  /*
    If true, radio will be checked.
  */
  checked?: boolean | null

  conditional?: RadiosArgsItemConditional | null

  /*
    If true, radio will be disabled.
  */
  disabled?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the radio input tag.
  */
  attributes?: Record<string, unknown> | null
}

export interface RadiosArgsItemConditional {
  /*
    Provide content for the conditional reveal.
  */
  html?: string | null
}

// The select component is described at https://design-system.service.gov.uk/components/select.
export interface SelectArgs {
  /*
    Id for each select box.
  */
  id: string

  /*
    Name property for the select.
  */
  name: string

  /*
    Array of option items for the select.
  */
  items: SelectArgsItem[]

  /*
    One or more element IDs to add to the `aria-describedby` attribute, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Label text or HTML by specifying value for either text or html keys.
  */
  label?: LabelArgs | null

  /*
    Options for the hint component.
  */
  hint?: HintArgs | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: ErrorMessageArgs | null

  /*
    Options for the form-group wrapper
  */
  formGroup?: SelectArgsFormGroup | null

  /*
    Classes to add to the select.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the select.
  */
  attributes?: Record<string, unknown> | null
}

export interface SelectArgsItem {
  /*
    Value for the option item. Defaults to an empty string.
  */
  value?: string | null

  /*
    Text for the option item.
  */
  text?: string | null

  /*
    Sets the option as the selected.
  */
  selected?: boolean | null

  /*
    Sets the option item as disabled.
  */
  disabled?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the option.
  */
  attributes?: Record<string, unknown> | null
}

export interface SelectArgsFormGroup {
  /*
    Classes to add to the form group (e.g. to show error state for the whole group)
  */
  classes?: string | null
}

// The skip link component is described at https://design-system.service.gov.uk/components/skip-link.
export interface SkipLinkArgs {
  /*
    If `html` is set, this is not required. Text to use within the skip link component. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the skip link component. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    The value of the skip link’s `href` attribute. Defaults to `#content` if you do not provide a value.
  */
  href?: string | null

  /*
    Classes to add to the skip link.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the skip link.
  */
  attributes?: Record<string, unknown> | null
}

// The summary list component is described at https://design-system.service.gov.uk/components/summary-list.
export interface SummaryListArgs {
  card?: SummaryListTitle | null
  /*
    Array of row item objects.
  */
  rows: SummaryListArgsRow[]

  /*
    Classes to add to the container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the container.
  */
  attributes?: Record<string, unknown> | null
}

export interface SummaryListTitle {
  title?: SummaryListArgsRowKey | null
}

export interface SummaryListArgsRow {
  /*
    Classes to add to the row `div`
  */
  classes?: string | null

  key?: SummaryListArgsRowKey | null

  value?: SummaryListArgsRowValue | null

  actions?: SummaryListArgsRowActions | null
}

export interface SummaryListArgsRowKey {
  /*
    If `html` is set, this is not required. Text to use within the each key. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  html?: string | null

  /*
    Classes to add to the key wrapper
  */
  classes?: string | null
}

export interface SummaryListArgsRowValue {
  /*
    If `html` is set, this is not required. Text to use within the each value. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the each value. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the value wrapper
  */
  classes?: string | null
}

export interface SummaryListArgsRowActions {
  /*
    Classes to add to the actions wrapper
  */
  classes?: string | null

  /*
    Array of action item objects
  */
  items?: SummaryListArgsRowActionsItem[] | null
}

export interface SummaryListArgsRowActionsItem {
  /*
    The value of the link href attribute for an action item
  */
  href: string

  /*
    If `html` is set, this is not required. Text to use within each action item. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the each action item. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Actions rely on context from the surrounding content so may require additional accessible text, text supplied to this option is appended to the end, use `html` for more complicated scenarios.
  */
  visuallyHiddenText?: string | null

  /*
    Classes to add to the action item.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the action item.
  */
  attributes?: Record<string, unknown> | null
}

// The table component is described at https://design-system.service.gov.uk/components/table.
export interface TableArgs {
  /*
    Array of table rows and cells.
  */
  rows: TableArgsRow[]

  /*
    Array of table head cells.
  */
  head?: TableArgsHeadElement[] | null

  /*
    Caption text
  */
  caption?: string | null

  /*
    Classes for caption text size. Classes should correspond to the available typography heading classes.
  */
  captionClasses?: string | null

  /*
    If set to true, first cell in table row will be a TH instead of a TD.
  */
  firstCellIsHeader?: boolean | null

  /*
    Classes to add to the table container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the table container.
  */
  attributes?: Record<string, unknown> | null
}

type TableArgsRow = TableArgsCell[]

export interface TableArgsCell {
  /*
    If `html` is set, this is not required. Text for cells in table rows. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML for cells in table rows. If `html` is provided, the `text` argument will be ignore
  */
  html?: string | null

  /*
    Specify format of a cell. Currently we only use "numeric".
  */
  format?: string | null

  /*
    Classes to add to the table row cell.
  */
  classes?: string | null

  /*
    Specify how many columns a cell extends.
  */
  colspan?: number | null // integer

  /*
    Specify how many rows a cell extends.
  */
  rowspan?: number | null // integer

  /*
    HTML attributes (for example data attributes) to add to the table cell.
  */
  attributes?: Record<string, unknown> | null
}

export interface TableArgsHeadElement {
  /*
    If `html` is set, this is not required. Text for table head cells. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML for table head cells. If `html` is provided, the `text` argument will be ignore
  */
  html?: string | null

  /*
    Specify format of a cell. Currently we only use "numeric".
  */
  format?: string | null

  /*
    Classes to add to the table head cell.
  */
  classes?: string | null

  /*
    Specify how many columns a cell extends.
  */
  colspan?: number | null // integer

  /*
    Specify how many rows a cell extends.
  */
  rowspan?: number | null // integer

  /*
    HTML attributes (for example data attributes) to add to the table cell.
  */
  attributes?: Record<string, unknown> | null
}

// The tabs component is described at https://design-system.service.gov.uk/components/tabs.
export interface TabsArgs {
  /*
    This is used for the main component and to compose id attribute for each item.
  */
  id?: string | null

  /*
    String to prefix id for each tab item if no id is specified on each item
  */
  idPrefix?: string | null

  /*
    Title for the tabs table of contents
  */
  title?: string | null

  /*
    Array of tab items.
  */
  items: TabsArgsItem[]

  /*
    Classes to add to the tabs component.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the tabs component.
  */
  attributes?: Record<string, unknown> | null
}

export interface TabsArgsItem {
  /*
    Specific id attribute for the tab item. If omitted, then `idPrefix` string is required instead.
  */
  id: string

  /*
    The text label of a tab item.
  */
  label: string

  /*
    HTML attributes (for example data attributes) to add to the tab.
  */
  attributes?: Record<string, unknown> | null

  /*
    Content for the panel
  */
  panel: TabsArgsItemPanel
}

export interface TabsArgsItemPanel {
  /*
    If `html` is set, this is not required. Text to use within each tab panel. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the each tab panel. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    HTML attributes (for example data attributes) to add to the tab panel.
  */
  attributes?: Record<string, unknown> | null
}

// The tag component is described at https://design-system.service.gov.uk/components/tag.
export interface TagArgs {
  /*
    If `html` is set, this is not required. Text to use within the tag component. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the tag component. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the tag.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the tag.
  */
  attributes?: Record<string, unknown> | null
}

// The textarea component is described at https://design-system.service.gov.uk/components/textarea.
export interface TextareaArgs {
  /*
    The id of the textarea.
  */
  id: string

  /*
    The name of the textarea, which is submitted with the form data.
  */
  name: string

  /*
    Optional field to enable or disable the spellcheck attribute on the textarea.
  */
  spellcheck?: boolean | null

  /*
    Optional number of textarea rows (default is 5 rows).
  */
  rows?: string | null

  /*
    Optional initial value of the textarea.
  */
  value?: string | null

  /*
    One or more element IDs to add to the `aria-describedby` attribute, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Options for the label component.
  */
  label: LabelArgs

  /*
    Options for the hint component.
  */
  hint?: HintArgs | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: ErrorMessageArgs | null

  /*
    Options for the form-group wrapper
  */
  formGroup?: TextareaArgsFormGroup | null

  /*
    Classes to add to the textarea.
  */
  classes?: string | null

  /*
    Attribute to [identify input purpose](https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html), for instance "postal-code" or "username". See [autofill](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill) for full list of attributes that can be used.
  */
  autocomplete?: string | null

  /*
    HTML attributes (for example data attributes) to add to the textarea.
  */
  attributes?: Record<string, unknown> | null
}

export interface TextareaArgsFormGroup {
  /*
    Classes to add to the form group (e.g. to show error state for the whole group)
  */
  classes?: string | null
}

// The warning text component is described at https://design-system.service.gov.uk/components/warning-text.
export interface WarningTextArgs {
  /*
    If `html` is set, this is not required. Text to use within the warning text component. If `html` is provided, the `text` argument will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the warning text component. If `html` is provided, the `text` argument will be ignored.
  */
  html?: string | null

  /*
    The fallback text for the icon.
  */
  iconFallbackText?: string | null

  /*
    Classes to add to the warning text.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the warning text.
  */
  attributes?: Record<string, unknown> | null
}

// The time input component is custom to this application.
export interface TimeInputArgs {
  /*
    This is used for the main component and to compose id attribute for each item.
  */
  id: string

  /*
    Optional prefix. This is used to prefix each `item.name` using `-`.
  */
  namePrefix?: string | null

  /*
    An array of input objects with name, value and classes.
  */
  items?: TimeInputArgsItem[] | null

  /*
    Options for the hint component.
  */
  hint?: HintArgs | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: ErrorMessageArgs | null

  /*
    Options for the form-group wrapper
  */
  formGroup?: TimeInputArgsFormGroup | null

  /*
    Options for the fieldset component (e.g. legend).
  */
  fieldset?: FieldsetArgs | null

  /*
    Classes to add to the date-input container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the date-input container.
  */
  attributes?: Record<string, unknown> | null

  /*
    Arguments for the AM / PM select component.
  */
  select: SelectArgs
}

export interface TimeInputArgsItem {
  /*
    Item-specific id. If provided, it will be used instead of the generated id.
  */
  id?: string | null

  /*
    Item-specific name attribute.
  */
  name: string

  /*
    Item-specific label text. If provided, this will be used instead of `name` for item label text.
  */
  label?: string | null

  /*
    If provided, it will be used as the initial value of the input.
  */
  value?: string | null

  /*
    Attribute to [identify input purpose](https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html), for instance "bday-day". See [autofill](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill) for full list of attributes that can be used.
  */
  autocomplete?: string | null

  /*
    Attribute to [provide a regular expression pattern](https://www.w3.org/TR/html51/sec-forms.html#the-pattern-attribute), used to match allowed character combinations for the input value.
  */
  pattern?: string | null

  /*
    Classes to add to date input item.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the date input tag.
  */
  attributes?: Record<string, unknown> | null
}

export interface TimeInputArgsFormGroup {
  /*
    Classes to add to the form group (e.g. to show error state for the whole group)
  */
  classes?: string | null
}
